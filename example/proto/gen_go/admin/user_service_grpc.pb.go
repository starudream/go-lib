// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: admin/user_service.proto

package admin

import (
	context "context"
	user "github.com/starudream/go-lib/example/v2/api/admin/user"
	common "github.com/starudream/go-lib/example/v2/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminUserService_Health_FullMethodName  = "/api.admin.AdminUserService/Health"
	AdminUserService_AddUser_FullMethodName = "/api.admin.AdminUserService/AddUser"
	AdminUserService_GetUser_FullMethodName = "/api.admin.AdminUserService/GetUser"
)

// AdminUserServiceClient is the client API for AdminUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminUserServiceClient interface {
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*structpb.Struct, error)
	// 创建用户
	AddUser(ctx context.Context, in *user.AddUserReq, opts ...grpc.CallOption) (*common.Id, error)
	// 获取用户
	GetUser(ctx context.Context, in *user.GetUserReq, opts ...grpc.CallOption) (*user.User, error)
}

type adminUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminUserServiceClient(cc grpc.ClientConnInterface) AdminUserServiceClient {
	return &adminUserServiceClient{cc}
}

func (c *adminUserServiceClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, AdminUserService_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUserServiceClient) AddUser(ctx context.Context, in *user.AddUserReq, opts ...grpc.CallOption) (*common.Id, error) {
	out := new(common.Id)
	err := c.cc.Invoke(ctx, AdminUserService_AddUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUserServiceClient) GetUser(ctx context.Context, in *user.GetUserReq, opts ...grpc.CallOption) (*user.User, error) {
	out := new(user.User)
	err := c.cc.Invoke(ctx, AdminUserService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminUserServiceServer is the server API for AdminUserService service.
// All implementations must embed UnimplementedAdminUserServiceServer
// for forward compatibility
type AdminUserServiceServer interface {
	Health(context.Context, *emptypb.Empty) (*structpb.Struct, error)
	// 创建用户
	AddUser(context.Context, *user.AddUserReq) (*common.Id, error)
	// 获取用户
	GetUser(context.Context, *user.GetUserReq) (*user.User, error)
	mustEmbedUnimplementedAdminUserServiceServer()
}

// UnimplementedAdminUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminUserServiceServer struct {
}

func (UnimplementedAdminUserServiceServer) Health(context.Context, *emptypb.Empty) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedAdminUserServiceServer) AddUser(context.Context, *user.AddUserReq) (*common.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedAdminUserServiceServer) GetUser(context.Context, *user.GetUserReq) (*user.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAdminUserServiceServer) mustEmbedUnimplementedAdminUserServiceServer() {}

// UnsafeAdminUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminUserServiceServer will
// result in compilation errors.
type UnsafeAdminUserServiceServer interface {
	mustEmbedUnimplementedAdminUserServiceServer()
}

func RegisterAdminUserServiceServer(s grpc.ServiceRegistrar, srv AdminUserServiceServer) {
	s.RegisterService(&AdminUserService_ServiceDesc, srv)
}

func _AdminUserService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUserServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUserService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUserServiceServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminUserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUserService_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUserServiceServer).AddUser(ctx, req.(*user.AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminUserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUserServiceServer).GetUser(ctx, req.(*user.GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminUserService_ServiceDesc is the grpc.ServiceDesc for AdminUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.admin.AdminUserService",
	HandlerType: (*AdminUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _AdminUserService_Health_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _AdminUserService_AddUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AdminUserService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/user_service.proto",
}
